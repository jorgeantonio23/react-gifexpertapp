{"version":3,"sources":["Components/AddCategory.js","Components/GifGridItem.js","Components/helpers/getGifs.js","Components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURIComponent","fetch","resp","json","data","console","log","gifs","map","img","images","downsized","GifGrid","setImages","useEffect","then","imgs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAMaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBC,OACI,uBAAMC,SAXU,SAACC,GACpBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAMZ,UACE,6BAAKD,IACL,uBAAOQ,KAAK,OAAOC,MAAOT,EAAaU,SAjBpB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,c,QCTf,SAASG,EAAT,GAAuC,EAAjBC,GAAkB,IAAdC,EAAa,EAAbA,MAAOC,EAAM,EAANA,IAI5C,OACI,sBAAKC,UAAU,OAAf,UACI,qBAAKC,IAAMF,EAAKG,IAAKJ,IACrB,4BAAIA,O,2BCTHK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbN,EAFa,0FAE4EO,mBAAmBF,GAF/F,sBAGAG,MAAMR,GAHN,cAGbS,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KACPC,QAAQC,IAAIF,GAENG,EAAOH,EAAKI,KAAI,SAAAC,GAClB,MAAO,CACHlB,GAAKkB,EAAIlB,GACTC,MAAOiB,EAAIjB,MACXC,IAAKgB,EAAIC,OAAOC,UAAUlB,QAXf,kBAebc,GAfa,4CAAH,sDCSPK,EAAU,SAAC,GAAgB,IAAfd,EAAc,EAAdA,SAErB,EAA4BrB,mBAAS,IAArC,mBAAOiC,EAAP,KAAeG,EAAf,KASA,OAPAC,qBAAU,WACNjB,EAASC,GAAUiB,MAAK,SAAAC,GAAI,OAAIH,EAAUG,QAC3C,CAAClB,IAMA,mCACG,sBAAKJ,UAAU,YAAf,UACG,6BAAKI,IAGCY,EAAOF,KAAK,SAAAC,GAAG,OACX,cAACnB,EAAD,eAEImB,GADCA,EAAIlB,aCclB0B,EA9BM,WAEjB,MAAoCxC,mBAAS,CAAC,cAA9C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KAOA,OACE,qCACG,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BAIQ0C,EAAWV,KAAI,SAAAV,GAAQ,OACnB,cAAC,EAAD,CAAyBA,SAAUA,GAApBA,Y,MC3BpCqB,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e880ccf9.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n//inputVALUE = AL PONERLO DENTRO DEL INPUT COMO VALOR DEL VALUE Y AL INTENTAR ESCRIBIR EN LA CAJA, NO PODEMOS DEBIDO A QUE ESTE \r\n//EL VALOR DE value, es predeterminado por asi decirlo\r\n\r\n//COMPONETNE QUE  SE ENCARGA DE ESCRIBIR EN LA CAJA DE TEXTO Y ACTUALIZA LA LISTA AL PRESIONAR ENTER CON LA BUSQUEDA QUE HICISTE\r\nexport const AddCategory = ({setCategories}) => {\r\n   \r\n   const [inputValue, setInputValue] = useState('') //LA CAJA NECESITA UN TIPO DE ESTADO, PARA SABER LO QUE EL USUARIO ESTA ESCRIBIENDO\r\n\r\n   const handleInputChange = (e) => {\r\n       setInputValue(e.target.value) //SU VALOR SE GUARDA EL INPUTVALUE, PARA PODER OCUPARLO DESPUES EL <h1></h1>\r\n    }\r\n\r\n   const handleSubmit = (e) =>{\r\n     e.preventDefault();\r\n\r\n     if(inputValue.trim().length > 2){\r\n      setCategories (cats => [inputValue, ...cats] )\r\n      setInputValue('')\r\n     }\r\n   }\r\n    \r\n\r\n    return (\r\n        <form onSubmit = {handleSubmit}>\r\n          <h1>{inputValue}</h1>\r\n          <input type=\"text\" value={inputValue}  onChange={handleInputChange}/> \r\n        </form>\r\n\r\n    )\r\n\r\n    \r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n","import React from 'react'\r\n\r\nexport default function GifGridItem({id, title, url}) {\r\n\r\n    //console.log(id, title, url)\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <img src ={url} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","export const getGifs = async(category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=BQHzOVBLheTZ1ELb1l0RM4tba9DB4B2L&q=${encodeURIComponent(category)}&limit=10`\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    console.log(data)\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id : img.id,\r\n            title: img.title,\r\n            url: img.images.downsized.url\r\n        }\r\n    })\r\n\r\n   return gifs;\r\n\r\n}\r\n\r\n","//COMPONENTE QUE RECIBA LO QUE SE ECRIBIO EN EL INPUT COMO ARGUMENTO Y QUE RECIBA LOS DATOS DE ESA BUSQUEDA O DEL INPUT\r\n\r\n//useEfect me permite ejecutar cierto codigo de manera condicional\r\nimport React, { useState, useEffect } from 'react'\r\nimport GifGridItem from './GifGridItem';\r\nimport {getGifs} from './helpers/getGifs';\r\n\r\n//category es la categoria que se recibira como argumento\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const [images, setImages] = useState([]);\r\n\r\n    useEffect(() =>{\r\n        getGifs (category).then(imgs => setImages(imgs))\r\n    }, [category]) //EL SEGUNDO ARGUMENTO QUE SE LE MANDA AL  useState ES UN ARREGLO DE DEPENDENCIAS\r\n            //CUANDO EL ARREGLO VA VACIO QUIERE DECIR QUE SOLO SE VA A EJECUTAR UNA VEZ (LA LLAMADA A LA FUNCION getGifs)\r\n   \r\n    \r\n\r\n    return (\r\n        <>\r\n           <div className=\"card-grid\">\r\n              <h3>{category}</h3>\r\n            \r\n                {\r\n                    images.map (img => (\r\n                        <GifGridItem \r\n                        key={img.id}\r\n                        {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n/* HACER QUE LOS RESUTADOS DE LA  BUSQUEDA SE IMPRIMIERAN EN PANTALLA\r\n<ol>\r\n{   ESTOS CORCHETES SIRVEN PARA PODER PONER DENTRO UNA EXPRESION DE JAVASCRIPT\r\n    images.map (img => (   HACER UN BARRIDO DE TODAS Y CADA UNA DE LAS IMAGENES RESULTANTES CON EL METODO MAP\r\n        <li key = {img.id}>{img.title}</li>  CADA UNO DE MIS IMAGENES TENDRA SU PROPIO TITULO Y SU PROPIA CLAVE \r\n    ))\r\n}\r\n</ol>\r\n*/","//AGREGAR UN NUEVO ELEMENTO A LA LISTA, CUANDOO SE DE CLICK AL BOTON\r\n    // console.log('Hola')\r\n       /*\r\n       Nota: setCategories es una funcion por lo tanto retorna un valor\r\n       sus valores son la copia de categories y el nuevo elemento que queremos agregar\r\n       [...categories, 'HunterXHunter]'\r\n       */\r\n\r\nimport React, {useState} from 'react'\r\nimport { AddCategory } from './Components/AddCategory'\r\nimport { GifGrid } from './Components/GifGrid'\r\n//Functional Component\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n    \r\n    \r\n   /*  const handleAdd = () => {                              \r\n       setCategories( [...categories, 'HunterXHunter'] )   \r\n    }*/\r\n\r\n    return (\r\n      <>\r\n         <h2>GifExpertApp</h2>\r\n         <AddCategory setCategories={setCategories}/>\r\n         <hr></hr>\r\n\r\n        \r\n\r\n         <ul>\r\n             {\r\n                 //categories.map() funciona como un ciclo for\r\n                 //para iterar sobre cada uno de los elementos dentro del useState\r\n                 categories.map(category => (\r\n                     <GifGrid key= {category} category={category}></GifGrid>\r\n    ))\r\n             }\r\n         </ul>\r\n      </>\r\n    )\r\n  }\r\n\r\nexport default GifExpertApp\r\n\r\n\r\n/*\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories ] = useState(['1, 2, 3, 4'])\r\n\r\n    const handleAdd = () => {\r\n        setCategories([...categories, 'MaxSteel'])\r\n    }\r\n\r\n    return (\r\n        <>\r\n         <h1>GifExpertApp</h1>\r\n         <hr></hr>\r\n\r\n         <button onClick = { handleAdd } > Click ME </button>\r\n         <ul>\r\n            {\r\n             categories.map( category => {\r\n                return <li key={category}>{category}</li>\r\n             })\r\n            }\r\n         </ul>\r\n        </>\r\n    )\r\n}*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}